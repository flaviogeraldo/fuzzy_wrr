#import sys
#sys.path.append("C:/Users/flavi/Python_projects/.venv/Lib/site-packages")

#import anfis
#import anfis.anfisfile
from anfis.membership.membershipfunction import MemFuncs
from anfis.anfisfile import AnfisClass
import numpy as np


# Carregar conjunto de treinamento
ts = np.loadtxt("C:\\Users\\flavi\\Python_projects\\.venv\\Lib\\site-packages\\anfis\\trainingSet.txt", usecols=[1, 2, 3])
X = ts[:, 0:2]
Y = ts[:, 2]

# Definir funções de pertinência (membership functions)
mf = [[['gaussmf', {'mean': 0., 'sigma': 1.}], ['gaussmf', {'mean': -1., 'sigma': 2.}], ['gaussmf', {'mean': -4., 'sigma': 10.}], ['gaussmf', {'mean': -7., 'sigma': 7.}]],
      [['gaussmf', {'mean': 1., 'sigma': 2.}], ['gaussmf', {'mean': 2., 'sigma': 3.}], ['gaussmf', {'mean': -2., 'sigma': 10.}], ['gaussmf', {'mean': -10.5, 'sigma': 5.}]]]

# Inicializar funções de pertinência e sistema ANFIS
mfc = MemFuncs(mf)
anf = AnfisClass(X, Y, mfc)

# Treinamento usando o método híbrido
anf.trainHybridJangOffLine(epochs=20)

# Verificar resultados
print(round(anf.consequents[-1][0], 6))
print(round(anf.consequents[-2][0], 6))
print(round(anf.fittedValues[9][0], 6))

# Teste de consistência de resultados
if round(anf.consequents[-1][0], 6) == -5.275538 and round(anf.consequents[-2][0], 6) == -1.990703 and round(anf.fittedValues[9][0], 6) == 0.002249:
    print('test is good')

# Plotar erros e resultados
print("Plotting errors")
anf.plotErrors()
print("Plotting results")
anf.plotResults()